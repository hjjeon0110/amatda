<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- sqlSessionTemplate 등록 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="amatda"/>
		<property name="password" value="amatda"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>
	
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- DataSourceTransaction은 dataSource를 작성해줘야 bean으로 설정할 수있다. -->
     	<property name="dataSource" ref="dataSource"/>
    </bean>
    
    
    
    
    <!-- 어노테이션으로 트랜젝션 매니저를 설정하기 위해 추가해야하는 설정 -->
    <!-- 어노테이션을 사용하기 위해 tx관련 스키마 추가 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
  
  
    <!-- 트랜젝션 매니저를 이용해 tx advice를 정의 -->
    <!-- advice는 공통코드 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<!-- 속성 정의 -->
    	<tx:attributes>
    	<!-- select라고 시작하는 메소드 & 읽기전용 & exception발생시 rollback -->
    		<tx:method name="select*" read-only="true" rollback-for="Exception"/>
    		<tx:method name="insert*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/> <!-- MemberServiceImpl에서 해줬던것을 xml에서 설정해줌 -->
    		<tx:method name="update*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/>
    		<tx:method name="delete*" rollback-for="Exception" propagation="REQUIRED" isolation="SERIALIZABLE"/>
    	</tx:attributes>
    </tx:advice>
    
    
 
    <!-- AOP를 이용하여 위의 txAdvice를 적용시키기 위해 advice객체가 weaving될 시점을 정해준다. -->
    <!-- pointcut을 등록해야한다. -->
    <!-- 사용할 공통 로직(Advice) + 사용할 위치(pointcut) = ASPECT -->
    <aop:config proxy-target-class="true">
    	<aop:pointcut  id="serviceMethod" expression="execution(* com.kh.amd..*ServiceImpl.*(..))"/> <!-- 사용할 메소드의 패턴지정(리턴타입+경로(..은 몇레벨이든 상관없이 하위/.은 바로 한단계 하위) + ServiceImpl로 끝나는  모든 메소드 -->
    	<aop:advisor id="transactionAdvice" pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
    </aop:config>
    
    
    <!-- 메일 보내기 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com" />
		<property name="port" value="587" />
		<property name="username" value="wln02036549@gmail.com" />
		<property name="password" value="011flskdidchlrh" />


	<!-- email 요청시는 SMTP -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
		
	</bean>
</beans>
